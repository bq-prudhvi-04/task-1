
name: 'Terraform GitHub Actions'
on:
  - pull_request
  - push
    
    
env:
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: demo          # set this to your Amazon ECR repository name
  ECS_SERVICE: demo                # set this to your Amazon ECS service name
  ECS_CLUSTER: demotask               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/image.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: demo          # set this to the name of the container in the
                                               # containerDefinitions section of you
  
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1   
        
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY   
           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
     
      - name: 'Terraform init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.0.11
          tf_actions_subcommand: "init" 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan  
        
      - name: Terraform apply
        run : terraform apply --auto-approve
        
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
         # image: ${{ steps.build-image.outputs.image }}
          image: 287110803852.dkr.ecr.us-east-1.amazonaws.com/demo
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

